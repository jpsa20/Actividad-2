%% Limpieza del entorno
clear all
close all
clc

%% Declaración de variables simbólicas para cada robot
% Robot Planar 
syms alpha1_pl(t) alpha2_pl(t) alpha3_pl(t) t d1_pl d2_pl d3_pl

% Robot Antropomórfico 
syms beta1_ant(t) bt2_ant(t) bt3_ant(t) t d1_ant d2_ant d3_ant

%% Configuración de las juntas (0 indica junta rotacional)
JointType_pl = [0 0 0];
JointType_ant = [0 0 0];

%% Vectores de coordenadas articulares y sus derivadas
Q_pl = [alpha1_pl, alpha2_pl, alpha3_pl];
Q_ant = [beta1_ant, bt2_ant, bt3_ant];

Qp_pl = diff(Q_pl, t);
Qp_ant = diff(Q_ant, t);

%% Número de grados de libertad (3 GDL para ambos robots)
DOF = size(JointType_pl,2);

%% ==================== ROBOT PLANAR DE 3 GDL ====================

%% Transformación Local (Planar)
% Cada eslabón: rotación sobre z y traslación a lo largo de x
P_pl(:,:,1) = [d1_pl; 0; 0];
R_pl(:,:,1) = [cos(alpha1_pl) -sin(alpha1_pl) 0;
              sin(alpha1_pl)  cos(alpha1_pl) 0;
              0              0              1];

P_pl(:,:,2) = [d2_pl; 0; 0];
R_pl(:,:,2) = [cos(alpha2_pl) -sin(alpha2_pl) 0;
              sin(alpha2_pl)  cos(alpha2_pl) 0;
              0              0              1];

P_pl(:,:,3) = [d3_pl; 0; 0];
R_pl(:,:,3) = [cos(alpha3_pl) -sin(alpha3_pl) 0;
              sin(alpha3_pl)  cos(alpha3_pl) 0;
              0              0              1];

ZerosVec = zeros(1,3);

% Inicialización de la matriz de transformación local y global
A_pl(:,:,DOF) = simplify([R_pl(:,:,DOF) P_pl(:,:,DOF); ZerosVec 1]);
T_pl(:,:,DOF) = simplify([R_pl(:,:,DOF) P_pl(:,:,DOF); ZerosVec 1]);
Pos_pl(:,:,DOF) = P_pl(:,:,DOF); % Posición local
Rot_pl(:,:,DOF) = R_pl(:,:,DOF); % Orientación local

for i = 1:DOF
    A_pl(:,:,i) = simplify([R_pl(:,:,i) P_pl(:,:,i); ZerosVec 1]);
    try
        T_pl(:,:,i) = T_pl(:,:,i-1)*A_pl(:,:,i);
    catch
        T_pl(:,:,i) = A_pl(:,:,i);
    end
    disp(['Matriz de Transformación global T_pl', num2str(i), ':'])
    T_pl(:,:,i) = simplify(T_pl(:,:,i));
    pretty(T_pl(:,:,i))
    
    Rot_pl(:,:,i) = T_pl(1:3,1:3,i);
    Pos_pl(:,:,i) = T_pl(1:3,4,i);
end

%% Jacobiano y Velocidades (Planar)
% Jacobiano lineal diferencial
Jv11_pl = functionalDerivative(Pos_pl(1,1,DOF), alpha1_pl);
Jv12_pl = functionalDerivative(Pos_pl(1,1,DOF), alpha2_pl);
Jv13_pl = functionalDerivative(Pos_pl(1,1,DOF), alpha3_pl);

Jv21_pl = functionalDerivative(Pos_pl(2,1,DOF), alpha1_pl);
Jv22_pl = functionalDerivative(Pos_pl(2,1,DOF), alpha2_pl);
Jv23_pl = functionalDerivative(Pos_pl(2,1,DOF), alpha3_pl);

Jv31_pl = functionalDerivative(Pos_pl(3,1,DOF), alpha1_pl);
Jv32_pl = functionalDerivative(Pos_pl(3,1,DOF), alpha2_pl);
Jv33_pl = functionalDerivative(Pos_pl(3,1,DOF), alpha3_pl);

Jv_diff_pl = simplify([Jv11_pl Jv12_pl Jv13_pl;
                       Jv21_pl Jv22_pl Jv23_pl;
                       Jv31_pl Jv32_pl Jv33_pl]);
disp('Jacobiano lineal obtenido de forma diferencial (Planar):')
pretty(Jv_diff_pl)

% Jacobiano analítico
Jv_anal_pl(:,DOF) = Pos_pl(:,:,DOF);
Jw_anal_pl(:,DOF) = Pos_pl(:,:,DOF);

for k = 1:DOF
    if JointType_pl(k)==0
        try
            Jv_anal_pl(:,k) = cross(Rot_pl(:,3,k-1), Pos_pl(:,:,DOF) - Pos_pl(:,:,k-1));
            Jw_anal_pl(:,k) = Rot_pl(:,3,k-1);
        catch
            Jv_anal_pl(:,k) = cross([0,0,1], Pos_pl(:,:,DOF));
            Jw_anal_pl(:,k) = [0,0,1];
        end
    else
        try
            Jv_anal_pl(:,k) = Rot_pl(:,3,k-1);
        catch
            Jv_anal_pl(:,k) = [0,0,1];
        end
        Jw_anal_pl(:,k) = [0,0,0];
    end
end
Jv_anal_pl = simplify(Jv_anal_pl);
Jw_anal_pl = simplify(Jw_anal_pl);

disp('Jacobiano analítico obtenido (Planar) - Lineal:')
pretty(Jv_anal_pl)
disp('Jacobiano analítico obtenido (Planar) - Angular:')
pretty(Jw_anal_pl)

% Velocidades del efector final (Planar)
Vel_lin_pl = simplify(Jv_anal_pl * Qp_pl.');
disp('Velocidad lineal obtenida (Planar):')
pretty(Vel_lin_pl)

Vel_ang_pl = simplify(Jw_anal_pl * Qp_pl.');
disp('Velocidad angular obtenida (Planar):')
pretty(Vel_ang_pl)

%% ==================== ROBOT ANTROPOMÓRFICO DE 3 GDL ====================

%% Transformación Local (Antropomórfico)
% Para la primera articulación: traslación a lo largo de z y rotación en función de beta1_ant
P_ant(:,:,1) = [0; 0; d1_ant];
R_ant(:,:,1) = [cos(beta1_ant)  0  sin(beta1_ant);
                sin(beta1_ant)  0 -cos(beta1_ant);
                0               1  0];

% Para las articulaciones 2 y 3: traslación en el plano XY
P_ant(:,:,2) = [d2_ant*cos(bt2_ant); d2_ant*sin(bt2_ant); 0];
R_ant(:,:,2) = [cos(bt2_ant) -sin(bt2_ant) 0;
                sin(bt2_ant)  cos(bt2_ant) 0;
                0              0              1];

P_ant(:,:,3) = [d3_ant*cos(bt3_ant); d3_ant*sin(bt3_ant); 0];
R_ant(:,:,3) = [cos(bt3_ant) -sin(bt3_ant) 0;
                sin(bt3_ant)  cos(bt3_ant) 0;
                0              0              1];

% Inicialización de la matriz de transformación local y global
A_ant(:,:,DOF) = simplify([R_ant(:,:,DOF) P_ant(:,:,DOF); ZerosVec 1]);
T_ant(:,:,DOF) = simplify([R_ant(:,:,DOF) P_ant(:,:,DOF); ZerosVec 1]);
Pos_ant(:,:,DOF) = P_ant(:,:,DOF);
Rot_ant(:,:,DOF) = R_ant(:,:,DOF);

for i = 1:DOF
    A_ant(:,:,i) = simplify([R_ant(:,:,i) P_ant(:,:,i); ZerosVec 1]);
    try
        T_ant(:,:,i) = T_ant(:,:,i-1)*A_ant(:,:,i);
    catch
        T_ant(:,:,i) = A_ant(:,:,i);
    end
    disp(['Matriz de Transformación global T_ant', num2str(i), ':'])
    T_ant(:,:,i) = simplify(T_ant(:,:,i));
    pretty(T_ant(:,:,i))
    
    Rot_ant(:,:,i) = T_ant(1:3,1:3,i);
    Pos_ant(:,:,i) = T_ant(1:3,4,i);
end

%% Jacobiano y Velocidades (Antropomórfico)
% Jacobiano lineal diferencial
Jv11_ant = functionalDerivative(Pos_ant(1,1,DOF), beta1_ant);
Jv12_ant = functionalDerivative(Pos_ant(1,1,DOF), bt2_ant);
Jv13_ant = functionalDerivative(Pos_ant(1,1,DOF), bt3_ant);

Jv21_ant = functionalDerivative(Pos_ant(2,1,DOF), beta1_ant);
Jv22_ant = functionalDerivative(Pos_ant(2,1,DOF), bt2_ant);
Jv23_ant = functionalDerivative(Pos_ant(2,1,DOF), bt3_ant);

Jv31_ant = functionalDerivative(Pos_ant(3,1,DOF), beta1_ant);
Jv32_ant = functionalDerivative(Pos_ant(3,1,DOF), bt2_ant);
Jv33_ant = functionalDerivative(Pos_ant(3,1,DOF), bt3_ant);

Jv_diff_ant = simplify([Jv11_ant Jv12_ant Jv13_ant;
                        Jv21_ant Jv22_ant Jv23_ant;
                        Jv31_ant Jv32_ant Jv33_ant]);
disp('Jacobiano lineal obtenido de forma diferencial (Antropomórfico):')
pretty(Jv_diff_ant)

% Jacobiano analítico
Jv_anal_ant(:,DOF) = Pos_ant(:,:,DOF);
Jw_anal_ant(:,DOF) = Pos_ant(:,:,DOF);
for k = 1:DOF
    if JointType_ant(k)==0
        try
            Jv_anal_ant(:,k) = cross(Rot_ant(:,3,k-1), Pos_ant(:,:,DOF) - Pos_ant(:,:,k-1));
            Jw_anal_ant(:,k) = Rot_ant(:,3,k-1);
        catch
            Jv_anal_ant(:,k) = cross([0,0,1], Pos_ant(:,:,DOF));
            Jw_anal_ant(:,k) = [0,0,1];
        end
    else
        try
            Jv_anal_ant(:,k) = Rot_ant(:,3,k-1);
        catch
            Jv_anal_ant(:,k) = [0,0,1];
        end
        Jw_anal_ant(:,k) = [0,0,0];
    end
end
Jv_anal_ant = simplify(Jv_anal_ant);
Jw_anal_ant = simplify(Jw_anal_ant);

disp('Jacobiano analítico obtenido (Antropomórfico) - Lineal:')
pretty(Jv_anal_ant)
disp('Jacobiano analítico obtenido (Antropomórfico) - Angular:')
pretty(Jw_anal_ant)

% Velocidades del efector final (Antropomórfico)
Vel_lin_ant = simplify(Jv_anal_ant * Qp_ant.');
disp('Velocidad lineal obtenida (Antropomórfico):')
pretty(Vel_lin_ant)

Vel_ang_ant = simplify(Jw_anal_ant * Qp_ant.');
disp('Velocidad angular obtenida (Antropomórfico):')
pretty(Vel_ang_ant)

